#<
function function-name {
param(
    [DateTime] $start = [DateTime]::Today,
    [DateTime] $end = $start,
    $firstDayOfWeek,
    [int[]] $highlightDay,
    [string[]] $highlightDate = [DateTime]::Today.ToString('yyyy-MM-dd')
    )

#actual code for the function goes here see the end of the topic for the complete code sample
}
>#


function RTMOD-Set-PowerManagement {

<#
  Sets Baseline Power Management:
      Monitor Timeout             Plugged in:   30 minutes           Battery:      3 minutes
      Disk Timeout                Plugged in:   30 minutes           Battery:      5 minutes
      Standby Timeout             Plugged in:   0 minutes (never)    Battery:      10 minutes
      Hibernate Timeout           Plugged in:   0 minutes (never)    Battery:      0 minutes (never)
      Hibernation:                OFF
      Wake Timers:                Plugged In:   1 (Enabled)          Battery:      1 (Enabled)
      Closing the Lid (Laptops)   Plugged In:   0 (Do Nothing)       Battery:      1 (Sleep)
#>

# Set power management settings:

$Args = @(
    ("/change monitor-timeout-ac 30"),                                                                                  # Plugged in:       Monitor timeout 30 minutes
    ("/change monitor-timeout-dc 3"),                                                                                   # Battery:          Monitor timeout 3 minutes
    ("/change disk-timeout-ac 30"),                                                                                     # Plugged in:       Disk timeout 30 minutes
    ("/change disk-timeout-dc 5"),                                                                                      # Battery:          Disk timeout 5 minutes
    ("/change standby-timeout-ac 0"),                                                                                   # Plugged in:       Standby (Sleep) 0 minutes (Never)
    ("/change standby-timeout-dc 5"),                                                                                   # Battery:          Standby (Sleep) 5 minutes
    ("/change hibernate-timeout-ac 0"),                                                                                 # Plugged in:       Hibernate 0 minutes (Never)
    ("/change hibernate-timeout-dc 0"),                                                                                 # Battery:          Hibernate 0 minutes (Never)
    ("-h off"),                                                                                                         #                   Hibernation OFF
    ("/SETACVALUEINDEX SCHEME_CURRENT 238c9fa8-0aad-41ed-83f4-97be242c8f20 bd3b718a-0680-4d9d-8ab2-e1d2b4ac806d 1"),    # Plugged in:       Wake Timers 1 (Enabled)
    ("/SETDCVALUEINDEX SCHEME_CURRENT 238c9fa8-0aad-41ed-83f4-97be242c8f20 bd3b718a-0680-4d9d-8ab2-e1d2b4ac806d 1"),    # Wake Timers:      Wake Timers 1 (Enabled)
    ("/setACvalueIndex scheme_current sub_buttons lidAction 0"),                                                        # Plugged in:       Close Lid - 0 (Do Nothing)
    ("/setDCvalueIndex scheme_current sub_buttons lidAction 1"),                                                        # Battery:          Close Lid - 1 (Sleep)
    ("/setActive scheme_current")                                                                                       # Apply settings to current power scheme
)

foreach ($Arg in $Args) {
    $p = Start-Process powercfg -WorkingDirectory "C:\Windows\System32" -windowstyle Hidden -ArgumentList $Arg -PassThru -Wait
    $code = $p.ExitCode

    If ($code -eq 0) {
        Write-Host "Successfully updated powercfg with setting $Arg"
    } else {     
        Write-Host "Error updating powercfg with setting $Arg - error code: $code"
    }
}
  
}

function RTMOD-Choco-Install {
$ErrorActionPreference = 'silentlycontinue'

$testchoco = choco -v
if (-not $testchoco) {
    Write-Output "Seems Chocolatey is not installed, installing now..."
    Set-ExecutionPolicy Bypass -Scope Process -Force; 
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; 
    iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1')); 
    choco feature enable -n allowGlobalConfirmation
} else {
    Write-Output "Chocolatey Version $testchoco is already installed."
}

}

function RTMOD-Choco-Test {
$ErrorActionPreference = 'silentlycontinue'
$testchoco = choco -v
if (-not $testchoco) {
    Write-Output "Seems Chocolatey is not installed"
} else {
    Write-Output "Chocolatey Version $testchoco is already installed."
}
}


function RTMOD-Choco-Update-All {
$ErrorActionPreference = 'silentlycontinue'

$testchoco = choco -v
if (-not $testchoco) {
    Write-Output "Seems Chocolatey is not installed."
} else {
    Write-Output "Chocolatey Version $testchoco is already installed."
    choco upgrade all
}
}
}
