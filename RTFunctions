# Functions Start

function _ActiveBackupCheck {
Write-Host "ACTIVE BACKUP CHECK 1 - Checking vssadmin providers"
    $VSS1 = vssadmin list providers
    $TotalP = 0
    $OtherP = 0
    $MSSCP = 0
    $MFSSCP = 0
        foreach ($line in $VSS1) {
            If ($line -match "Provider name:") {
                $TotalP = $TotalP + 1
                If ($line -match "Microsoft Software Shadow Copy") {
                    $MSSCP = $MSSCP + 1
                } elseif ($line -match "Microsoft File Share Shadow Copy") {
                    $MFSSCP = $MFSSCP + 1
                } else {
                    Write-Host "Other Provider Found: $line"
                    $OtherP = $OtherP + 1
                }
            }
        }

    Write-Host "Microsoft Software Shadow Copy Providers: $MSSCP"
    Write-Host "Microsoft File Share Shadow Copy Providers: $MFSSCP"
    Write-Host "Other Providers: $OtherP"
    Write-Host "Total Providers: $TotalP"

    If ($OtherP -gt 0) {
        $Output = "ACTIVE BACKUP CHECK 1 - FAIL - Unapproved providers found. Only the Microsoft Software Shadow Copy Provider and Microsoft File Share Shadow Copy Provider are allowed. All others must be removed." -forgroundcolor Red
        Write-Host 
        Return $False
    } else {
        Write-Host "ACTIVE BACKUP CHECK 1 - PASS - No unapproved providers found." -forgroundcolor Green
    }

Write-Host "ACTIVE BACKUP CHECK 2 - Checking vssadmin writers"
    $VSS2 = vssadmin list writers

    $Total = 0
    $Stable = 0
    $Unstable = 0

    foreach ($line in $VSS2) {
        If ($line -match "State:") {
            $Total = $Total + 1
            If ($line -notmatch "Stable") {            
                $Unstable = $Unstable + 1              
            } else {
                $Stable = $Stable + 1
            }
        }
    }

    Write-Host "Stable Writers: $Stable"
    Write-Host "Unstable Writers: $Unstable"
    Write-Host "Total Writers: $Total"

    If ($Unstable -gt 0) {
        Write-Host "$Unstable unstable writers found. Restarting the Volume Shadow Copy Service."
        Get-Service VSS | Restart-Service

        $VSS3 = vssadmin list writers

        $Total = 0
        $Stable = 0
        $Unstable = 0

        foreach ($line in $VSS3) {
            If ($line -match "State:") {
                $Total = $Total + 1
                If ($line -notmatch "Stable") {            
                    $Unstable = $Unstable + 1              
                } else {
                    $Stable = $Stable + 1
                }
            }
        }
        Write-Host "Second Run:"
        Write-Host "`tStable Writers: $Stable"
        Write-Host "`tUnstable Writers: $Unstable"
        Write-Host "`tTotal Writers: $Total"
        If ($Unstable -gt 0) {
            Write-Host "ACTIVE BACKUP CHECK 2 - FAIL - Unstable writers found. Restarting the Volume Shadow Copy Service."
            Return $False
        }
    } else {
        Write-Host "ACTIVE BACKUP CHECK 2 - PASS - No unstable writers found."
    }
}

function _DirDelete {
    param ($DirectoryPath)

    If (Test-Path $DirectoryPath) {    
        $GB = [math]::round((Get-ChildItem $DirectoryPath -Recurse | Measure-Object -Property Length -Sum).Sum / 1GB,2)
        Write-Host "$DirectoryPath has been found and is $GB GB in size"
        remove-item $DirectoryPath -Recurse -Force -ErrorAction SilentlyContinue
        If ($LASTEXITCODE -eq 0) {
            Write-Host "Deleted folder $DirectoryPath freeing up $GB GB of space."
        } else {
            Write-Host "Error deleting folder $DirectoryPath"
        }
        
    } else {
        Write-Host "$DirectoryPath does not exist"
    }
} # _DirDelete

function _DirDeleteContents {
    param ($DirectoryPath)

    If (Test-Path $DirectoryPath) {    
        $GB = [math]::round((Get-ChildItem $DirectoryPath -Recurse | Measure-Object -Property Length -Sum).Sum / 1GB,2)
        Write-Host "$DirectoryPath has been found and is $GB GB in size"
        remove-item $DirectoryPath\* -Recurse -Force -ErrorAction SilentlyContinue
#        If ($LASTEXITCODE -eq 0) {
#            Write-Host "Deleted contents of folder $DirectoryPath freeing up $GB GB of space."
#        } else {
#            Write-Host "Error deleting contents of folder $DirectoryPath"
#        }   
    } else {
        Write-Host "$f does not exist"
    }
} # _DirDeleteContents

function _Get-UptimeDays {
    param (
    )
    $Uptime = New-TimeSpan (get-date (Get-CimInstance -ClassName Win32_OperatingSystem).LastBootUpTime) (get-Date)
    Return [math]::Round($uptime.TotalDays,2)
}

function _IEXRun {
    param (
        $Command,
        $Message
    )

    Write-Host Running $Command -ForegroundColor Gray
    $Output = IEX $Command

    If ($Output -match $Message) {
        Write-Host SUCCESS: Successfully ran command: $Command -ForegroundColor Green
    } else {
        Write-Host WARNING: Possible failure running command: $Command -ForegroundColor Yellow
        Write-Host Log Output below: -ForegroundColor Yellow
        Write-Host $Output -ForegroundColor Yellow
    }
}

function _InputWait {
    param (
        $Prompt
    )

    While (1) {
        Write-Host $Prompt
        Write-Host Type YES to begin fix
        Write-Host Type NO begin skip fix

        $Choice = Read-Host

        If ($Choice -eq "YES") {
            Return $true
        } elseif ($Choice -eq "NO") {
            Return $false
        } else {
            Write-Host INVALID ENTRY DETECTED -ForegroundColor Yellow
            Write-Host
        }
    }
}

# Functions End
