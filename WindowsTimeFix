Function _RTWinTimeFix {
    param(
        [Parameter(Mandatory=$false)]
        [string] $TimeZone,
        [Parameter(Mandatory=$false)]
        [string] $TimeServer
        )

    If ($TimeZone) {
        Write-Host "Checking TimeZone: $TimeZone"

        $TZ = Get-TimeZone -ListAvailable
        $Match = 0
        foreach ($Z in $TZ) {
            If ($Z.id -match $TimeZone) {
                If ($Z.Id.Length -eq $TimeZone.Length) {
                    Write-Host "Match on $TimeZone"
                    $Match = $Match + 1
                }
            }
    }

    If ($Match -eq 1) {
        Write-Host "SUCCESS: Match found for $TimeZone" -ForegroundColor Green
    } else {
        Write-Host "FAILURE: No match found for $TimeZone" -ForegroundColor Red
        Return
    }

    $GetTZ = Get-TimeZone
    Write-Host "Current TimeZone is:" $GetTz.Id

    If ($GetTZ.Id -ne $TimeZone) {
        Set-TimeZone $TimeZone -PassThru
        If ($?) {
            Write-Host "SUCCESS: Timezone set to: $TimeZone" -ForegroundColor Green
        } else {
            Write-Host "FAILURE: Error setting Timezone to: $TimeZone" -ForegroundColor Red
        }
    } else {
        Write-Host "GENERAL: Timezone already set to: $TimeZone" -ForegroundColor Yellow
    }

    }

    If ($TimeServer) {
        Write-Host "Checking Timeserver: $TimeServer"

        $Test = Test-NetConnection -ComputerName $TimeServer -InformationLevel "Detailed"
        If ($Test.PingSucceeded -eq "True") {
            Write-Host "SUCCESS: Connection test successful for Time Server: $TimeZone" -ForegroundColor Green
        } else {
            Write-Host "FAILURE: Connection test Unsuccessful for Time Server: $TimeZone" -ForegroundColor Red
            Return
        }

        Get-Service "Windows Time" | Stop-Service
            If ($?) {
                Write-Host "SUCCESS: Stopped Service: 'Windows Time'" -ForegroundColor Green
            } else {
                Write-Host "FAILURE: Error stopping Service: 'Windows Time'" -ForegroundColor Red
            }
        

        Start-Process w32tm -ArgumentList "/unregister" -Wait -NoNewWindow
        Start-Process w32tm -ArgumentList "/register" -Wait -NoNewWindow

        get-service "Windows Time" | Set-Service -StartupType Automatic
            If ($?) {
                Write-Host "SUCCESS: Set Service: 'Windows Time' to Automatic" -ForegroundColor Green
            } else {
                Write-Host "FAILURE: Error serring service: 'Windows Time' to Automatic" -ForegroundColor Red
            }

        Get-Service "Windows Time" | Start-Service
            If ($?) {
                Write-Host "SUCCESS: Started Service: 'Windows Time'" -ForegroundColor Green
            } else {
                Write-Host "FAILURE: Error starting Service: 'Windows Time'" -ForegroundColor Red
            }

        Start-Process w32tm -ArgumentList "/config /manualpeerlist:$TimeServer /syncfromflags:manual /update" -Wait -NoNewWindow
        Start-Process w32tm -ArgumentList "/config /update" -Wait -NoNewWindow
        Start-Process w32tm -ArgumentList "/resync /rediscover" -Wait -NoNewWindow

        Write-Host "SUCCESS: Finished resetting Windows Time Server Settings" -ForegroundColor Green
        Start-Process w32tm -ArgumentList "/query /status" -Wait -NoNewWindow
    }
}

If (!($TS)) {$TS = read-host -prompt 'Enter value for Time Server'}
If (!($TZ)) {$TZ = read-host -prompt 'Enter value for Time Zone'}


_RTWinTimeFix -TimeServer $TS -TimeZone $TZ
