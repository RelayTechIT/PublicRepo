$ErrorActionPreference  =   'Stop'
$ProgressPreference     =   'SilentlyContinue'

function _Check-Environment {
    param (
        $ExecutionScope,
        $ExecutionPolicy
    )
        try {
            Write-Host "Checking execution policy for the scope $($ExecutionScope) is set to $($ExecutionPolicy)"
                if ((Get-ExecutionPolicy -Scope CurrentUser) -eq "RemoteSigned") {
                    Write-Host "The execution policy for the scope $($ExecutionScope) is set correctly to: $($ExecutionPolicy)" -foregroundcolor Green
                } else {
                    Write-Host "The execution policy for the scope $($ExecutionScope) is not set correctly. Changing it now." -foregroundcolor Yellow
                    Set-ExecutionPolicy -Scope $ExecutionScope $ExecutionPolicy -Force > $null
                    Write-Host "The execution policy for the scope $($ExecutionScope) is has been set correctly to: $($ExecutionPolicy)" -foregroundcolor Green
                }
        }
        catch {
            Write-Host "An error has occurred $($_)" -ForegroundColor Red
        }
}

function _Check-Module {
    param (
        $ModuleName
    )
        $type = "module"
        try {
            Write-Host "Checking for $($type) $($ModuleName)"
                if (Get-Module -ListAvailable -Name $ModuleName -ErrorAction SilentlyContinue) {
                    Write-Host "The $($type) $($ModuleName) is installed." -foregroundcolor Green
                } else {
                    Write-Host "The $($type) $($ModuleName) is not installed. Installing it now." -foregroundcolor Yellow
                            Install-Module -Name $ModuleName -Force
                    Write-Host "Successfully installed the $($type) $($ModuleName)." -foregroundcolor Green
                }
            Import-Module $ModuleName -Force
        }
        catch {
            Write-Host "An error has occurred $($_)" -ForegroundColor Red
        }
    
}

function _Check-PackageProvider {
    param (
        $PackageProviderName
    )
        $type = "Package Provider"
        try {
            Write-Host "Checking for $($type) $($PackageProviderName)"
                if (Get-PackageProvider -ListAvailable -Name $PackageProviderName -ErrorAction SilentlyContinue) {
                    Write-Host "The $($type) $($PackageProviderName) is installed." -foregroundcolor Green
                } else {
                    Write-Host "The $($type) $($PackageProviderName) is not installed. Installing it now." -foregroundcolor Yellow
                            Install-PackageProvider -Name $PackageProviderName -Force
                    Write-Host "Successfully installed the $($type) $($PackageProviderName)." -foregroundcolor Green
                }
            Import-PackageProvider -Name $($PackageProviderName) -Force
        }
        catch {
            Write-Host "An error has occurred $($_)" -ForegroundColor Red
        }
    
}
